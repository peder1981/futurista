"""
M√≥dulo respons√°vel pelas visualiza√ß√µes de dados econ√¥micos.
"""
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from IPython.display import display, Markdown
import numpy as np
from scipy import stats

class EconomicVisualizer:
    """
    Classe para cria√ß√£o de visualiza√ß√µes de dados econ√¥micos.
    """
    
    @staticmethod
    def create_markdown_table(df, year, max_rows=50):
        """
        Cria uma tabela markdown formatada com os dados.
        
        Args:
            df (pd.DataFrame): DataFrame com os dados
            year (int): Ano dos dados
            max_rows (int): N√∫mero m√°ximo de linhas na tabela
            
        Returns:
            str: Tabela markdown formatada
        """
        md = f"## üåç Juros Reais vs Infla√ß√£o ‚Äî {year}\n\n"
        md += "| Pa√≠s | ISO3 | Juros (%) | Infla√ß√£o (%) | Diferen√ßa (pp) | Raz√£o |\n"
        md += "|------|------|------------|----------------|----------------|--------|\n"
        
        for _, row in df.head(max_rows).iterrows():
            md += f"| {row['country']} | {row['iso3']} | {row['interest']:.2f} | "
            md += f"{row['inflation']:.2f} | {row['gap']:.2f} | {row['ratio']:.2f} |\n"
            
        return md
    
    @staticmethod
    def display_markdown_table(df, year, max_rows=50):
        """
        Exibe uma tabela markdown formatada.
        
        Args:
            df (pd.DataFrame): DataFrame com os dados
            year (int): Ano dos dados
            max_rows (int): N√∫mero m√°ximo de linhas na tabela
        """
        md = EconomicVisualizer.create_markdown_table(df, year, max_rows)
        display(Markdown(md))
    
    @staticmethod
    def create_choropleth_map(df, year):
        """
        Cria um mapa coropl√©tico com os dados.
        
        Args:
            df (pd.DataFrame): DataFrame com os dados
            year (int): Ano dos dados
            
        Returns:
            plotly.graph_objects.Figure: Figura do mapa
        """
        fig = px.choropleth(
            df,
            locations="iso3",
            color="ratio",
            hover_name="country",
            color_continuous_scale="Plasma",
            title=f"üåê Juros / Infla√ß√£o ‚Äî {year}",
            labels={"ratio": "Juros / Infla√ß√£o"}
        )
        fig.update_geos(showframe=False, showcoastlines=False)
        fig.update_layout(margin={"r":0,"t":50,"l":0,"b":0})
        
        return fig
    
    @staticmethod
    def create_scatter_plot(df, year):
        """
        Cria um gr√°fico de dispers√£o com os dados.
        
        Args:
            df (pd.DataFrame): DataFrame com os dados
            year (int): Ano dos dados
            
        Returns:
            plotly.graph_objects.Figure: Figura do gr√°fico de dispers√£o
        """
        fig = px.scatter(
            df,
            x="inflation",
            y="interest",
            color="ratio",
            hover_name="country",
            title=f"üìâ Dispers√£o: Infla√ß√£o √ó Juros ‚Äî {year}",
            labels={"interest": "Juros (%)", "inflation": "Infla√ß√£o (%)"}
        )
        fig.update_traces(marker=dict(opacity=0.7, line=dict(width=1.0, color='DarkSlateGrey')))
        
        # Adiciona linha de refer√™ncia onde juros = infla√ß√£o
        max_val = max(df["interest"].max(), df["inflation"].max()) * 1.1
        fig.add_shape(
            type="line", 
            x0=0, y0=0, 
            x1=max_val, y1=max_val,
            line=dict(color="grey", width=1, dash="dash")
        )
        fig.add_annotation(
            x=max_val*0.7, 
            y=max_val*0.7, 
            text="Juros = Infla√ß√£o", 
            showarrow=False,
            font=dict(color="grey")
        )
        
        return fig
